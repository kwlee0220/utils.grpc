plugins {
	id 'java-library'
	id 'eclipse'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'etri'
version = '24.01.12'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.60.1'
        }
    }
    generateProtoTasks {
    	ofSourceSet('main').configureEach {
    		plugins {
            	grpc {}
            }
        }
    }
}

sourceSets {
	main {
		proto {
			srcDirs 'src/main/proto'
		}
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

ext {
	logback_version = '1.3.14'
	javax_annotation_version = '1.3.2'
	grpc_version = '1.60.1'
	protobuf_version = '3.25.2'
	
	junit_version = '4.12'
	mockito_version = '3.2.4'
	hamcrest_version = '1.3'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(":utils")
	
	// Logback with SLF4j
	implementation "ch.qos.logback:logback-classic:${logback_version}"
	
	// grpc
	implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
	implementation "io.grpc:grpc-stub:${grpc_version}"
	implementation "io.grpc:grpc-protobuf:${grpc_version}"
	implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"
	implementation "javax.annotation:javax.annotation-api:${javax_annotation_version}"
	
	// test
	testImplementation "junit:junit:${junit_version}"
	testImplementation "org.mockito:mockito-core:${mockito_version}"
	testImplementation "org.hamcrest:hamcrest-all:${hamcrest_version}"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'build/classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.contains('/test/') ) {
							entry.output = 'build/test_classes'
						}
						else {
							entry.output = 'build/classes'
						}
					}
				}
			}
		}
	}
}
